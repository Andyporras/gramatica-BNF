package com.compi;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.lang.Math;

/**
 * Clase principal del compilador
 */
class Parser;

/**
 * Definicion de tokens terminales y no terminales
 */
/*L_SANTACLAUS	Entero
L_PERENOEL	Flotante
L_FATHERCHRISTMAS	Booleano
L_KRISKRINGLE	Caracter
L_DEDMOROZ	String
L_PAPANOEL	Array
abrecuento	(
cierrecuento	)
abreempaque	[
cierraempaque	]
abreregalo	{
cierraregalo	}
*/

/* Terminales */
terminal Integer L_SANTACLAUS;
terminal Integer SANTACLAUS; // INT 
terminal Double L_PERENOEL; // Agregado para exprFloat
terminal Double PERENOEL; // FLOAT
terminal Boolean L_FATHERCHRISTMAS; // Agregado para exprBol
terminal Boolean FATHERCHRISTMAS; // BOOLEAN
terminal Character L_KRISKRINGLE; // Agregado para expresiones de caracteres
terminal Character KRISKRINGLE; // CHAR
terminal String L_DEDMOROZ; // Agregado para expresiones de cadenas
terminal String DEDMOROZ; // STRING
terminal Integer[] L_PAPANOEL; // Agregado para expresiones de arrays
terminal Integer[] PAPANOEL; // ARRAY
terminal Integer ABRECUENTO; // (
terminal Integer CIERRECUENTO; // )
terminal Integer ABREEMPAQUE; // [
terminal Integer CIERREEMPAQUE; // ]
terminal Integer ABREREGALO; // {
terminal Integer CIERRAREGALO; // }
terminal String PERSONA; // indentificador
// Coma ,
terminal Integer COMA;
terminal Integer ELFO;//IF
terminal Integer HADA;//ELSE
terminal Integer DUENDE;//ELSE
terminal Integer ENVUELVE;//FOR
terminal Integer HACE;//DO
terminal Integer REVISA;//UNTIL
terminal Integer ENVIA;//RETURN
terminal Integer CORTA;//BREAK
terminal Integer NARRA;//print
terminal Integer ESCUCHA;//READ 
terminal Integer ENTREGA;//=
// main
terminal Integer MAIN;


/* No terminales */
non terminal Integer exprInt;
non terminal Double exprFloat; // Nuevo no terminal para expresiones de punto flotante
non terminal Boolean exprBol; // Nuevo no terminal para expresiones booleanas

terminal RUDOLPH, DASHER, DANCER, PRANCER, VIXEN, COMET,
         CUPID, GRINCH, QUIEN, HERMEY, BUDDY, JINGLE,
         JANGLE, PEPPERMINT, WUNORSE, MELCHOR, GASPAR,
         BALTASAR, FINREGALO;
        
/**
 * Declaracion de predencoa para resolver conflictos de ambiguedad.
 */
/* Declaraciones de precedencia */
precedence left RUDOLPH, DASHER;
precedence left DANCER, PRANCER;
precedence left VIXEN, COMET;
precedence left CUPID;
precedence left GRINCH, QUIEN;
precedence left HERMEY, BUDDY, JINGLE, JANGLE;
precedence left PEPPERMINT, WUNORSE;
precedence left MELCHOR;
precedence left GASPAR;
precedence left BALTASAR;
precedence left FINREGALO;

/* SÃ­mbolo inicial y definocion de producciones gramaticales*/
start with exprInt;

/**
 * Producciones para expresiones enteras
 */
exprInt ::= exprInt:e1 RUDOLPH exprInt:e2   {: RESULT = e1 + e2; :}
        | exprInt:e1 DASHER exprInt:e2 {: RESULT = e1 - e2; :}
        | exprInt:e1 DANCER exprInt:e2  {: RESULT = e1 / e2; :}
        | exprInt:e1 VIXEN exprInt:e2  {: RESULT = e1 * e2; :}
        | exprInt:e1 COMET exprInt:e2  {: RESULT = e1 % e2; :}
        | GRINCH exprInt:e1  {: RESULT = e1 + 1; :}
        | QUIEN exprInt:e1  {: RESULT = e1 - 1; :}
        | L_SANTACLAUS:n              {: RESULT = n; :};

/**
 * Producciones para expresiones de punto flotante
 */
exprFloat ::= L_PERENOEL:e1 RUDOLPH L_PERENOEL:e2   {: RESULT = e1 + e2; :}
           | L_PERENOEL:e1 DASHER L_PERENOEL:e2 {: RESULT = e1 - e2; :}
           | L_PERENOEL:e1 DANCER L_PERENOEL:e2  {: RESULT = e1 / e2; :}
           | L_PERENOEL:e1 VIXEN L_PERENOEL:e2  {: RESULT = e1 * e2; :}
           | GRINCH L_PERENOEL:e1  {: RESULT = e1 + 1.0; :}
           | QUIEN L_PERENOEL:e1  {: RESULT = e1 - 1.0; :};

/**
 * Producciones para expresiones booleanas
 */
exprBol ::= L_FATHERCHRISTMAS:e1 PEPPERMINT L_FATHERCHRISTMAS:e2   {: RESULT = e1 && e2; :}
         | L_FATHERCHRISTMAS:e1 WUNORSE L_FATHERCHRISTMAS:e2 {: RESULT = e1 || e2; :}
         | MELCHOR L_FATHERCHRISTMAS:e1  {: RESULT = !e1; :};

/**
 * Producciones para expresiones de caracteres
 */
// Agregado para expresiones de caracteres
exprInt ::= L_KRISKRINGLE:e1  {: RESULT = (int)e1; :};
/**
 * Producciones para expresiones de arrays
 */
// Agregado para expresiones de arrays
exprInt ::= L_PAPANOEL:e1  {: RESULT = e1.length; :};
/**
 * Producciones para expresiones de cadenas
 */
// Agregado para expresiones de cadenas
exprInt ::= L_DEDMOROZ:e1  {: RESULT = e1.length(); :};

